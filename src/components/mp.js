import React, { useState, useRef, useEffect } from "react";
// initially leaflet map is shown, then on clicking generate the tiff is diplayed, on clicking demo orignal must be displayed again
import {
  MapContainer,
  TileLayer,
  GeoJSON,
  FeatureGroup,
  ZoomControl,
  useMap,
} from "react-leaflet"; //Marker, Popup,
import { GeoSearchControl, OpenStreetMapProvider } from "leaflet-geosearch";
import "leaflet-geosearch/assets/css/leaflet.css";
import "leaflet/dist/leaflet.css";
import "leaflet-draw/dist/leaflet.draw.js";
import GeoTiffLayer from "./GeoTiffLayer";
import Legend from "./Legend/Legend";
import Sucrose from "../data/Sucrose.json";
import Harvest_Date from "../data/Harvest_Date.json";
import Water_Stress from "../data/Water_Stress.json";
import Yield from "../data/Yield.json";
import { EditControl } from "react-leaflet-draw";
import "leaflet-draw/dist/leaflet.draw.css";
import { DateRange } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";
import chroma from "chroma-js";
import styles from "./MainPage.css";
import { area } from "@turf/turf";
import CustomSearchInput from "./CustomSeachInput.js";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import L from "leaflet";

const SetViewOnClick = ({ coords, map }) => {
  React.useEffect(() => {
    if (coords && map) {
      map.setView(coords, 13);
    }
  }, [coords, map]);

  return null;
};

const MainPage = (props) => {
  const [tiffUrl, setTiffUrl] = useState(null);
  const center = [27.6329, 80.0173];
  const zoom = 3;
  const [intialtiff,setinitialtiff] = useState(true);
  async function fetchGeoTiff() {
    const response = await fetch("http://localhost:5000/geotiff");
    const data = await response.json();
    // console.log(data);
    // return ;
    const base64Data = data.file;
    const byteCharacters = atob(base64Data);
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], { type: "image/tiff" });
    const url = URL.createObjectURL(blob);
    setTiffUrl(url);
  }
  
  // useEffect(() => {
  //   fetchGeoTiff();
  // }, []);

  const options = {
    pixelValuesToColorFn: (values) => {
      if(intialtiff === true) {
      return "rgba(0,0,0,0"; 
      }
      else{
        const nir = values[0];
        const colorScale = chroma.scale("spectral").domain([-12, 2]);
        if(nir === 0) { return "rgba(0,0,0,0"; }
        return colorScale(nir).css();
      }
    },
    resolution: 1024,
    opacity: 1,
  };


  //   const map = useMap();

  //   useEffect(() => {
  //     const provider = new OpenStreetMapProvider();
  //     const searchControl = new GeoSearchControl({
  //       provider: provider,
  //       style: "bar", // 'bar' or 'button'
  //       showMarker: true,
  //       showPopup: true,
  //       autoClose: true,
  //       retainZoomLevel: false,
  //       animateZoom: true,
  //       position: "topright",
  //       placeholder: "Search for a location",
  //     });

  //     map.addControl(searchControl);

  //     return () => {
  //       map.removeControl(searchControl);
  //     };
  //   }, [map]);

  //   return <>{children && children(map)}</>;
  // };

  // calculating min max avg of tiff file clipped to geojson

  // For changing GeoJson files using buttons
  const initalGeoJsonData = {
    type: "FeatureCollection",
    name: "Sucrose",
    features: [
      {
        type: "Feature",
        properties: {
          WKT: "MULTIPOLYGON Z (((79.9969338603052 27.6397296334741 0,79.9965764772106 27.6391289703675 0,79.9964948916994 27.6391516764409 0,79.9963664883264 27.6392541170761 0,79.9961583362812 27.6393770110811 0,79.9961447188261 27.6394042619392 0,79.9963297392645 27.6400066425705 0,79.9966373977831 27.639890460552 0,79.9969338603052 27.6397296334741 0)))",
          Name: "262000218",
          Pol: "20.44",
          Field_No: "1",
          Sucrose: 19.72,
        },
        geometry: {
          type: "MultiPolygon",
          coordinates: [
            [
              [
                [79.996933860305205, 27.639729633474101, 0.0],
                [79.996576477210596, 27.639128970367501, 0.0],
                [79.996494891699399, 27.6391516764409, 0.0],
                [79.996366488326402, 27.639254117076099, 0.0],
                [79.996158336281198, 27.639377011081098, 0.0],
                [79.996144718826102, 27.639404261939202, 0.0],
                [79.996329739264496, 27.640006642570501, 0.0],
                [79.996637397783104, 27.639890460551999, 0.0],
                [79.996933860305205, 27.639729633474101, 0.0],
              ],
            ],
          ],
        },
      },
    ],
  };
  const [nameToPass, setNameToPass] = useState(initalGeoJsonData);
  const onEachFeature = (feature, layer) => {
    if (nameToPass === Sucrose) {
      const popupContent = `<div><strong>Field Number:</strong> ${feature.properties.Field_No}</div>
        <div><strong>Sucrose:</strong> ${feature.properties.Sucrose}</div>`;
      layer.bindPopup(popupContent);
    } else if (nameToPass === Yield) {
      const popupContent = `<div><strong>Field Number:</strong> ${feature.properties.Field_No}</div>
        <div><strong>Yield:</strong> ${feature.properties.Yield_sum}</div>`;
      layer.bindPopup(popupContent);
    } else if (nameToPass === Water_Stress) {
      const popupContent = `<div><strong>Field Number:</strong> ${feature.properties.Field_No}</div>
        <div><strong>Water Stress:</strong> ${feature.properties.Water_Stress}</div>`;
      layer.bindPopup(popupContent);
    } else if (nameToPass === Harvest_Date) {
      const popupContent = `<div><strong>Field Number:</strong> ${feature.properties.Field_No}</div>
        <div><strong>Harvest Date:</strong> ${feature.properties.Harvest_Date}</div>
        <div><strong>DOP:</strong> ${feature.properties.DOP}</div>`;
      layer.bindPopup(popupContent);
    }
  };
  //console.log(mapData.features);

  // To generate GeoJson after drawing a figure
  // Area calculated is in m^2 by default

  const [geojson, setGeojson] = useState(null);
  const [areaOfPolygon, setAreaOfPolygon] = useState(0);

  const onDrawCreate = (e) => {
    const layer = e.layer;
    const geojson = layer.toGeoJSON();
    setGeojson(geojson);
    const polygonArea = area(geojson) / 1000000;
    const round = polygonArea.toFixed(2);
    console.log(geojson);
    setAreaOfPolygon(round);
    sendGeoJSONToServer(geojson);
  };
  
  const sendGeoJSONToServer = async (geojsonData) => {
    const response = await fetch('http://localhost:5000/upload_geojson', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(geojsonData),
    });

    if (response.ok) {
      const jsonResponse = await response.json();
      console.log(jsonResponse.message);
    } else {
      console.error(`Failed to send GeoJSON data: ${response.status}`);
    }
  };

  const [startDate, setStartDate] = useState(new Date());
  console.log(typeof(startDate));
  
  const sendDateToServer = async (date) => {
    try {
      const response = await fetch('http://localhost:5000/process_date', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ startDate: date }),
      });
  
      if (response.ok) {
        const jsonResponse = await response.json();
        console.log('Received date from server:', jsonResponse.receivedDate);
      } else {
        console.error(`Failed to send date to server: ${response.status}`);
      }
    } catch (error) {
      console.error('Error sending date to server:', error);
    }
  };
  
  sendDateToServer(startDate)
  
  
  

  const [endDate, setEndDate] = useState(new Date());



  // New project icon
  const NewProjIcon = () => {
    return (
      <svg
        width="18"
        height="20"
        viewBox="0 0 18 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12.3337 13.3333C12.3337 13.5543 12.2459 13.7663 12.0896 13.9226C11.9333 14.0789 11.7213 14.1667 11.5003 14.1667H9.83366V15.8333C9.83366 16.0543 9.74586 16.2663 9.58958 16.4226C9.4333 16.5789 9.22134 16.6667 9.00033 16.6667C8.77931 16.6667 8.56735 16.5789 8.41107 16.4226C8.25479 16.2663 8.16699 16.0543 8.16699 15.8333V14.1667H6.50033C6.27931 14.1667 6.06735 14.0789 5.91107 13.9226C5.75479 13.7663 5.66699 13.5543 5.66699 13.3333C5.66699 13.1123 5.75479 12.9003 5.91107 12.7441C6.06735 12.5878 6.27931 12.5 6.50033 12.5H8.16699V10.8333C8.16699 10.6123 8.25479 10.4003 8.41107 10.2441C8.56735 10.0878 8.77931 9.99999 9.00033 9.99999C9.22134 9.99999 9.4333 10.0878 9.58958 10.2441C9.74586 10.4003 9.83366 10.6123 9.83366 10.8333V12.5H11.5003C11.7213 12.5 11.9333 12.5878 12.0896 12.7441C12.2459 12.9003 12.3337 13.1123 12.3337 13.3333ZM17.3337 8.73749V15.8333C17.3323 16.938 16.8929 17.997 16.1118 18.7781C15.3307 19.5593 14.2717 19.9987 13.167 20H4.83366C3.729 19.9987 2.66996 19.5593 1.88884 18.7781C1.10773 17.997 0.668315 16.938 0.666992 15.8333V4.16666C0.668315 3.06199 1.10773 2.00295 1.88884 1.22184C2.66996 0.440724 3.729 0.0013119 4.83366 -1.13103e-05H8.59616C9.36251 -0.00198375 10.1216 0.147978 10.8297 0.441205C11.5377 0.734431 12.1806 1.1651 12.7212 1.70832L15.6245 4.61332C16.168 5.15352 16.599 5.7962 16.8923 6.50413C17.1857 7.21206 17.3357 7.97117 17.3337 8.73749ZM11.5428 2.88666C11.2806 2.63262 10.9861 2.41409 10.667 2.23666V5.83332C10.667 6.05434 10.7548 6.2663 10.9111 6.42258C11.0674 6.57886 11.2793 6.66666 11.5003 6.66666H15.097C14.9195 6.34765 14.7006 6.05344 14.4462 5.79166L11.5428 2.88666ZM15.667 8.73749C15.667 8.59999 15.6403 8.46832 15.6278 8.33332H11.5003C10.8373 8.33332 10.2014 8.06993 9.73256 7.60109C9.26372 7.13225 9.00033 6.49636 9.00033 5.83332V1.70582C8.86532 1.69332 8.73283 1.66666 8.59616 1.66666H4.83366C4.17062 1.66666 3.53473 1.93005 3.06589 2.39889C2.59705 2.86773 2.33366 3.50361 2.33366 4.16666V15.8333C2.33366 16.4964 2.59705 17.1322 3.06589 17.6011C3.53473 18.0699 4.17062 18.3333 4.83366 18.3333H13.167C13.83 18.3333 14.4659 18.0699 14.9348 17.6011C15.4036 17.1322 15.667 16.4964 15.667 15.8333V8.73749Z"
          fill="white"
        />
      </svg>
    );
  };
  const DemoIcon = () => {
    return (
      <svg
        width="18"
        height="20"
        viewBox="0 0 18 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12.3337 13.3333C12.3337 13.5543 12.2459 13.7663 12.0896 13.9226C11.9333 14.0789 11.7213 14.1667 11.5003 14.1667H9.83366V15.8333C9.83366 16.0543 9.74586 16.2663 9.58958 16.4226C9.4333 16.5789 9.22134 16.6667 9.00033 16.6667C8.77931 16.6667 8.56735 16.5789 8.41107 16.4226C8.25479 16.2663 8.16699 16.0543 8.16699 15.8333V14.1667H6.50033C6.27931 14.1667 6.06735 14.0789 5.91107 13.9226C5.75479 13.7663 5.66699 13.5543 5.66699 13.3333C5.66699 13.1123 5.75479 12.9003 5.91107 12.7441C6.06735 12.5878 6.27931 12.5 6.50033 12.5H8.16699V10.8333C8.16699 10.6123 8.25479 10.4003 8.41107 10.2441C8.56735 10.0878 8.77931 9.99999 9.00033 9.99999C9.22134 9.99999 9.4333 10.0878 9.58958 10.2441C9.74586 10.4003 9.83366 10.6123 9.83366 10.8333V12.5H11.5003C11.7213 12.5 11.9333 12.5878 12.0896 12.7441C12.2459 12.9003 12.3337 13.1123 12.3337 13.3333ZM17.3337 8.73749V15.8333C17.3323 16.938 16.8929 17.997 16.1118 18.7781C15.3307 19.5593 14.2717 19.9987 13.167 20H4.83366C3.729 19.9987 2.66996 19.5593 1.88884 18.7781C1.10773 17.997 0.668315 16.938 0.666992 15.8333V4.16666C0.668315 3.06199 1.10773 2.00295 1.88884 1.22184C2.66996 0.440724 3.729 0.0013119 4.83366 -1.13103e-05H8.59616C9.36251 -0.00198375 10.1216 0.147978 10.8297 0.441205C11.5377 0.734431 12.1806 1.1651 12.7212 1.70832L15.6245 4.61332C16.168 5.15352 16.599 5.7962 16.8923 6.50413C17.1857 7.21206 17.3357 7.97117 17.3337 8.73749ZM11.5428 2.88666C11.2806 2.63262 10.9861 2.41409 10.667 2.23666V5.83332C10.667 6.05434 10.7548 6.2663 10.9111 6.42258C11.0674 6.57886 11.2793 6.66666 11.5003 6.66666H15.097C14.9195 6.34765 14.7006 6.05344 14.4462 5.79166L11.5428 2.88666ZM15.667 8.73749C15.667 8.59999 15.6403 8.46832 15.6278 8.33332H11.5003C10.8373 8.33332 10.2014 8.06993 9.73256 7.60109C9.26372 7.13225 9.00033 6.49636 9.00033 5.83332V1.70582C8.86532 1.69332 8.73283 1.66666 8.59616 1.66666H4.83366C4.17062 1.66666 3.53473 1.93005 3.06589 2.39889C2.59705 2.86773 2.33366 3.50361 2.33366 4.16666V15.8333C2.33366 16.4964 2.59705 17.1322 3.06589 17.6011C3.53473 18.0699 4.17062 18.3333 4.83366 18.3333H13.167C13.83 18.3333 14.4659 18.0699 14.9348 17.6011C15.4036 17.1322 15.667 16.4964 15.667 15.8333V8.73749Z"
          fill="white"
        />
      </svg>
    );
  };
  const BlocksIcon = () => {
    return (
      <svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M18.9417 10.5667L15.4917 8.58334C15.4 8.53334 15.3083 8.50001 15.2083 8.46667V3.83334C15.2083 3.10001 14.8 2.41667 14.15 2.04167L11.1083 0.291675C10.425 -0.0999919 9.58333 -0.0999919 8.9 0.291675L5.85 2.04167C5.2 2.41667 4.79167 3.10001 4.79167 3.83334V8.47501C4.69167 8.50834 4.6 8.54167 4.50833 8.59167L1.05833 10.5667C0.408333 10.9417 0 11.625 0 12.3583V16.1667C0 16.9 0.408333 17.5833 1.05833 17.9583L4.10833 19.7083C4.45 19.9 4.83333 20 5.21667 20C5.6 20 5.98333 19.9 6.325 19.7083L10.0083 17.5917L13.6917 19.7083C14.0333 19.9 14.4167 20 14.8 20C15.1833 20 15.5667 19.9 15.9083 19.7083L18.9583 17.9583C19.6083 17.5833 20.0167 16.9 20.0167 16.1667V12.3583C20.0167 11.625 19.6083 10.9417 18.9583 10.5667H18.9417ZM18.525 11.2917C18.5917 11.3333 18.65 11.3833 18.7083 11.4333L14.7833 13.6833L10.825 11.4167L14.4917 9.30834C14.6667 9.20834 14.8833 9.20834 15.0667 9.30834L18.5167 11.2917H18.525ZM5.65 3.62501L9.58333 5.88334V10.7L5.90833 8.59167C5.81667 8.54167 5.725 8.50834 5.625 8.47501V3.83334C5.625 3.76667 5.64167 3.69167 5.65 3.62501ZM14.3417 3.62501C14.3583 3.69167 14.3667 3.75834 14.3667 3.83334V8.47501C14.2667 8.50834 14.175 8.54167 14.0833 8.59167L10.4083 10.7V5.88334L14.3417 3.62501ZM9.30833 1.01667C9.73333 0.775008 10.2583 0.775008 10.6833 1.01667L13.7333 2.76667C13.8 2.80834 13.8583 2.85834 13.9167 2.90834L9.99167 5.15834L6.075 2.90834C6.13333 2.85834 6.19167 2.80834 6.25833 2.76667L9.30833 1.01667ZM4.925 9.30834C5.01667 9.25834 5.10833 9.23334 5.20833 9.23334C5.30833 9.23334 5.40833 9.25834 5.49167 9.30834L9.15833 11.4167L5.2 13.6833L1.28333 11.4333C1.34167 11.3833 1.4 11.3333 1.46667 11.2917L4.91667 9.30834H4.925ZM1.46667 17.2333C1.075 17.0083 0.833333 16.6 0.833333 16.1667V12.3583C0.833333 12.2917 0.85 12.2167 0.858333 12.15L4.79167 14.4083V19.1C4.7 19.0667 4.60833 19.0417 4.51667 18.9917L1.46667 17.2417V17.2333ZM5.89167 18.9833C5.80833 19.0333 5.70833 19.0667 5.61667 19.0917V14.4L9.575 12.125V16.8583L5.89167 18.975V18.9833ZM10.4083 16.8667V12.1333L14.3667 14.4083V19.1C14.275 19.0667 14.1833 19.0417 14.0917 18.9917L10.4083 16.875V16.8667ZM19.1583 16.1667C19.1583 16.6 18.9167 17.0083 18.525 17.2333L15.475 18.9833C15.3917 19.0333 15.2917 19.0667 15.2 19.0917V14.4L19.1333 12.1417C19.15 12.2083 19.1583 12.275 19.1583 12.35V16.1583V16.1667Z"
          fill="white"
        />
      </svg>
    );
  };
  const BooksIcon = () => {
    return (
      <svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M20 2.49994V17.1758L10 20.0333L0 17.1758V3.33328C0 2.54161 0.3625 1.81411 0.995 1.33744C1.2025 1.18078 1.43083 1.07411 1.66667 0.989109V15.9191L10 18.2999L18.3333 15.9191V0.155776C18.5692 0.240776 18.7983 0.347442 19.005 0.504109C19.6375 0.980776 20 1.70828 20 2.49994ZM10.8333 2.80911V14.6949L10 14.9333L9.16667 14.6949V2.80911C9.16667 1.69911 8.42083 0.709942 7.29083 0.389942L5.9 0.0574424C4.59083 -0.255058 3.33333 0.738276 3.33333 2.08411V14.7616L10 16.6666L16.6667 14.7616V2.11244C16.6667 0.781609 15.4358 -0.208391 14.1358 0.0774424L12.6458 0.404942C11.5783 0.709942 10.8325 1.69911 10.8325 2.80911H10.8333Z"
          fill="#F5F5F5"
        />
      </svg>
    );
  };
  const AgriAIIcon = () => {
    return (
      <svg
        width="28"
        height="16"
        viewBox="0 0 28 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M25.4832 1.80558C24.4284 0.75104 23.0245 0.118385 21.5357 0.0266811C20.047 -0.0650226 18.5761 0.390548 17.3998 1.30766C16.3258 0.473154 15.0043 0.02003 13.6441 0.0197664C12.2839 0.0195028 10.9623 0.472116 9.88785 1.3062C8.66246 0.344673 7.11628 -0.112891 5.56497 0.0269213C4.01366 0.166733 2.57421 0.89338 1.54048 2.05851C0.506759 3.22364 -0.0432779 4.73939 0.00266241 6.29631C0.0486027 7.85323 0.687056 9.33395 1.78768 10.4361L5.54645 14.1954C5.54936 14.1982 5.55227 14.2009 5.55555 14.2038C5.55883 14.2068 5.55973 14.2081 5.56183 14.2102C5.56574 14.2141 5.56992 14.2177 5.57384 14.2216C5.63358 14.2807 5.69423 14.3383 5.75579 14.3944C5.78745 14.4235 5.81948 14.4516 5.85168 14.4799C5.87782 14.5026 5.90409 14.5252 5.93047 14.5475C7.00194 15.4553 8.35323 15.9669 9.75729 15.996C11.1615 16.0252 12.5328 15.5703 13.6411 14.7077C14.8173 15.6247 16.2883 16.0804 17.7769 15.9887C19.2657 15.8969 20.6696 15.2643 21.7244 14.2098L25.4833 10.451C26.628 9.30365 27.2709 7.74903 27.2709 6.12826C27.2709 4.50749 26.628 2.95292 25.4832 1.80558ZM13.6429 1.61198C14.5366 1.61141 15.4103 1.87598 16.1535 2.3722C16.8968 2.86843 17.4761 3.57399 17.8182 4.3996C18.1602 5.22521 18.2497 6.13375 18.0752 7.01021C17.9007 7.88667 17.4701 8.69167 16.8379 9.32331L13.6429 12.5182L10.4478 9.32331C9.81561 8.69167 9.38501 7.88667 9.21051 7.01019C9.03601 6.13371 9.12545 5.22518 9.46753 4.39957C9.80961 3.57395 10.389 2.86838 11.1322 2.37217C11.8755 1.87595 12.7492 1.61139 13.6429 1.61198ZM5.3655 9.88719C5.36387 9.29356 5.48001 8.70554 5.70718 8.15713C5.93436 7.60871 6.26806 7.11079 6.68896 6.69221L7.53933 5.84184C7.49817 6.69183 7.63533 7.54104 7.94203 8.33484C8.24873 9.12861 8.71817 9.84943 9.32014 10.451L12.4498 13.5806C11.7747 14.0535 10.9829 14.3319 10.1604 14.3856C9.33807 14.4393 8.51665 14.2663 7.78585 13.8852C7.05505 13.5041 6.44286 12.9299 6.01604 12.2248C5.58922 11.5198 5.36413 10.7111 5.36531 9.88692L5.3655 9.88719ZM2.91518 9.30829C2.11543 8.50874 1.64463 7.43832 1.59576 6.30851C1.5469 5.1787 1.92352 4.07162 2.65124 3.20601C3.37896 2.34039 4.40486 1.77916 5.52626 1.63319C6.64768 1.48721 7.78306 1.76712 8.70813 2.41759L5.56128 5.56444C4.99184 6.13079 4.54039 6.80447 4.23305 7.54647C3.92573 8.28847 3.76862 9.08406 3.77083 9.88719C3.77083 9.98199 3.77304 10.0764 3.77747 10.1706L2.91518 9.30829ZM17.4019 14.4054C16.4788 14.4076 15.5775 14.1249 14.821 13.5957L17.966 10.451C18.568 9.84943 19.0374 9.12861 19.344 8.33483C19.6507 7.54103 19.7879 6.69183 19.7468 5.84184L20.5972 6.69221C21.2291 7.32414 21.6594 8.12925 21.8337 9.00574C22.0081 9.88218 21.9186 10.7907 21.5765 11.6163C21.2345 12.442 20.6553 13.1476 19.9123 13.644C19.1692 14.1405 18.2956 14.4054 17.4019 14.4054ZM24.3557 9.32331L23.5084 10.1706C23.5127 10.0765 23.5149 9.98208 23.515 9.88719C23.5172 9.08406 23.3601 8.28846 23.0528 7.54646C22.7455 6.80446 22.2939 6.13079 21.7245 5.56444L18.5798 2.41969C19.5065 1.77481 20.6411 1.50026 21.7602 1.65007C22.8792 1.79988 23.9016 2.36321 24.6261 3.22913C25.3505 4.09505 25.7245 5.20082 25.6745 6.32873C25.6245 7.45664 25.154 8.52494 24.3557 9.32331Z"
          fill="white"
        />
      </svg>
    );
  };
  const HorizontalLineIcon = () => {
    return (
      <svg
        width="21"
        height="4"
        strokeWidth={2}
        viewBox="0 -1 21 4"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M19.4372 0.333344H1.10384C0.643604 0.333344 0.270508 0.70644 0.270508 1.16668C0.270508 1.62691 0.643604 2.00001 1.10384 2.00001H19.4372C19.8974 2.00001 20.2705 1.62691 20.2705 1.16668C20.2705 0.70644 19.8974 0.333344 19.4372 0.333344Z"
          fill="white"
        />
      </svg>
    );
  };
  const PolygonIcon = () => {
    return (
      <svg
        className="pentagon-icon"
        viewBox="0 0 24 24"
        width="24"
        height="24"
        fill="none"
        stroke="currentColor"
        strokeWidth="1"
      >
        <path d="M12 2L2.051 8.193 5.637 20.907h12.725l3.587-12.714L12 2z" />
        <ellipse cx="12" cy="4" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="3.7" cy="8.5" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="20.3" cy="8.5" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="7.5" cy="19" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="16.5" cy="19" rx="1" ry="1" fill="currentColor" />
      </svg>
    );
  };
  const RectangleIcon = () => {
    return (
      <svg
        className="hollow-rectangle-icon"
        viewBox="0 0 24 24"
        width="24"
        height="24"
        fill="none"
        stroke="currentColor"
        strokeWidth="1"
      >
        <rect x="3" y="3" width="18" height="18" />
        <ellipse cx="3" cy="3" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="21" cy="3" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="3" cy="21" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="21" cy="21" rx="1" ry="1" fill="currentColor" />
      </svg>
    );
  };
  const PolylineIcon = () => {
    return (
      <svg
        className="line-segment-icon"
        viewBox="0 0 24 24"
        width="24"
        height="24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
      >
        <line x1="4" y1="12" x2="20" y2="12" />
        <ellipse cx="4" cy="12" rx="1" ry="1" fill="currentColor" />
        <ellipse cx="20" cy="12" rx="1" ry="1" fill="currentColor" />
      </svg>
    );
  };
  const CircleIcon = () => {
    return (
      <svg
        className="circle-icon"
        viewBox="0 0 24 24"
        width="24"
        height="24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
      >
        <circle cx="12" cy="12" r="9" />
      </svg>
    );
  };
  const ParametersInsideBoxIcon = () => {
    return (
      <svg
        width="20"
        height="13"
        viewBox="0 0 20 13"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M9.99974 12.2979C9.55022 12.2977 9.10922 12.1752 8.7239 11.9437L0.403903 6.95123C0.280693 6.87715 0.178745 6.77244 0.10797 6.6473C0.0371952 6.52216 0 6.38084 0 6.23707C0 6.0933 0.0371952 5.95197 0.10797 5.82683C0.178745 5.70169 0.280693 5.59699 0.403903 5.5229L8.7239 0.5304C9.10921 0.298924 9.55024 0.176636 9.99974 0.176636C10.4492 0.176636 10.8903 0.298924 11.2756 0.5304L19.5956 5.5229C19.7188 5.59699 19.8207 5.70169 19.8915 5.82683C19.9623 5.95197 19.9995 6.0933 19.9995 6.23707C19.9995 6.38084 19.9623 6.52216 19.8915 6.6473C19.8207 6.77244 19.7188 6.87715 19.5956 6.95123L11.2756 11.9437C10.8902 12.1752 10.4493 12.2977 9.99974 12.2979ZM2.45307 6.23707L9.58307 10.5146C9.709 10.5899 9.853 10.6297 9.99974 10.6297C10.1465 10.6297 10.2905 10.5899 10.4164 10.5146L17.5464 6.23707L10.4164 1.95957C10.2905 1.88424 10.1465 1.84446 9.99974 1.84446C9.853 1.84446 9.709 1.88424 9.58307 1.95957L2.45307 6.23707Z"
          fill="#FAFAFA"
        />
      </svg>
    );
  };
  const ParametersVShapedIcon = () => {
    return (
      <svg
        width="20"
        height="8"
        viewBox="0 0 20 8"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M18.7371 0.132897L9.99959 5.37623L1.26209 0.132897C1.07257 0.0191853 0.845645 -0.014583 0.631228 0.0390212C0.416811 0.0926253 0.232471 0.22921 0.118759 0.41873C0.00504782 0.608249 -0.0287202 0.835178 0.024884 1.04959C0.0784881 1.26401 0.215073 1.44835 0.404593 1.56206L9.57126 7.06206C9.70087 7.13993 9.84923 7.18107 10.0004 7.18107C10.1516 7.18107 10.3 7.13993 10.4296 7.06206L19.5963 1.56206C19.7858 1.44835 19.9224 1.26401 19.976 1.04959C20.0296 0.835178 19.9958 0.608249 19.8821 0.41873C19.7684 0.22921 19.584 0.0926253 19.3696 0.0390212C19.1552 -0.014583 18.9283 0.0191853 18.7388 0.132897H18.7371Z"
          fill="#FAFAFA"
        />
      </svg>
    );
  };
  const DividerLineHorizontalIcon = () => {
    return (
      <svg
        width="290"
        height="2"
        viewBox="0 0 336 2"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M0 0.987061L336 0.987031"
          stroke="white"
          stroke-opacity="0.24"
          stroke-width="0.8"
        />
      </svg>
    );
  };
  const ReportRainIcon = () => {
    return (
      <svg
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M9.33326 16C9.15645 16 8.98688 15.9297 8.86185 15.8047C8.73683 15.6797 8.66659 15.5101 8.66659 15.3333V12C8.66659 11.8232 8.73683 11.6536 8.86185 11.5286C8.98688 11.4036 9.15645 11.3333 9.33326 11.3333C9.51007 11.3333 9.67964 11.4036 9.80466 11.5286C9.92969 11.6536 9.99992 11.8232 9.99992 12V15.3333C9.99992 15.5101 9.92969 15.6797 9.80466 15.8047C9.67964 15.9297 9.51007 16 9.33326 16ZM7.33326 14V10.6667C7.33326 10.4898 7.26302 10.3203 7.13799 10.1952C7.01297 10.0702 6.8434 9.99999 6.66659 9.99999C6.48978 9.99999 6.32021 10.0702 6.19519 10.1952C6.07016 10.3203 5.99992 10.4898 5.99992 10.6667V14C5.99992 14.1768 6.07016 14.3464 6.19519 14.4714C6.32021 14.5964 6.48978 14.6667 6.66659 14.6667C6.8434 14.6667 7.01297 14.5964 7.13799 14.4714C7.26302 14.3464 7.33326 14.1768 7.33326 14ZM4.66659 15.3333V12C4.66659 11.8232 4.59635 11.6536 4.47133 11.5286C4.3463 11.4036 4.17673 11.3333 3.99992 11.3333C3.82311 11.3333 3.65354 11.4036 3.52852 11.5286C3.4035 11.6536 3.33326 11.8232 3.33326 12V15.3333C3.33326 15.5101 3.4035 15.6797 3.52852 15.8047C3.65354 15.9297 3.82311 16 3.99992 16C4.17673 16 4.3463 15.9297 4.47133 15.8047C4.59635 15.6797 4.66659 15.5101 4.66659 15.3333ZM12.6666 14V10.6667C12.6666 10.4898 12.5964 10.3203 12.4713 10.1952C12.3463 10.0702 12.1767 9.99999 11.9999 9.99999C11.8231 9.99999 11.6535 10.0702 11.5285 10.1952C11.4035 10.3203 11.3333 10.4898 11.3333 10.6667V14C11.3333 14.1768 11.4035 14.3464 11.5285 14.4714C11.6535 14.5964 11.8231 14.6667 11.9999 14.6667C12.1767 14.6667 12.3463 14.5964 12.4713 14.4714C12.5964 14.3464 12.6666 14.1768 12.6666 14ZM11.9453 3.42199C11.8462 3.39786 11.7537 3.35203 11.6745 3.28781C11.5953 3.2236 11.5313 3.14259 11.4873 3.05065C8.74992 -2.48735 0.329257 0.126652 1.43059 6.35199C1.44611 6.45878 1.43506 6.56776 1.39843 6.66927C1.3618 6.77078 1.30072 6.8617 1.22059 6.93399C0.830696 7.29169 0.522027 7.72883 0.315393 8.21594C0.10876 8.70304 0.00896544 9.22879 0.0227387 9.75774C0.0365119 10.2867 0.163532 10.8065 0.395236 11.2822C0.62694 11.7579 0.957942 12.1784 1.36592 12.5153C1.42947 12.5662 1.50716 12.5962 1.58839 12.6012C1.66962 12.6062 1.75043 12.5861 1.81978 12.5435C1.88913 12.5009 1.94365 12.438 1.97589 12.3632C2.00813 12.2885 2.01653 12.2057 1.99992 12.126C1.98861 11.7918 2.05972 11.46 2.20696 11.1599C2.3542 10.8597 2.57306 10.6003 2.84422 10.4047C3.11538 10.2092 3.43051 10.0833 3.76182 10.0383C4.09312 9.99327 4.43041 10.0305 4.74392 10.1467C4.861 9.72674 5.11234 9.35669 5.45952 9.09307C5.80671 8.82944 6.23066 8.68672 6.66659 8.68672C7.10252 8.68672 7.52647 8.82944 7.87366 9.09307C8.22084 9.35669 8.47218 9.72674 8.58926 10.1467C9.06642 9.95333 9.60009 9.95333 10.0773 10.1467C10.2108 9.67841 10.5105 9.27497 10.9203 9.01197C11.33 8.74897 11.8217 8.64448 12.303 8.7181C12.7843 8.79171 13.2222 9.03838 13.5346 9.41185C13.847 9.78531 14.0125 10.2599 13.9999 10.7467V11.5567C14 11.625 14.0203 11.6919 14.0582 11.7488C14.0962 11.8057 14.15 11.8501 14.2131 11.8765C14.2762 11.9029 14.3456 11.9101 14.4128 11.8972C14.4799 11.8843 14.5418 11.8519 14.5906 11.804C17.2253 9.22065 16.0306 4.14865 11.9453 3.42199Z"
          fill="#4CB963"
        />
      </svg>
    );
  };
  const ShareIcon = () => {
    return (
      <svg
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12.8888 9.77798C12.3847 9.77839 11.8883 9.90145 11.4425 10.1365C10.9966 10.3716 10.6146 10.7117 10.3295 11.1273L5.99012 9.16798C6.29833 8.42374 6.29952 7.58777 5.99345 6.84265L10.3268 4.87332C10.7494 5.48449 11.377 5.92396 12.0958 6.11201C12.8147 6.30007 13.5771 6.22425 14.2449 5.89832C14.9126 5.57238 15.4414 5.01791 15.7353 4.33549C16.0293 3.65307 16.0689 2.8879 15.847 2.17876C15.6251 1.46963 15.1564 0.863513 14.5259 0.470352C13.8954 0.0771912 13.1449 -0.0769698 12.4105 0.0358326C11.6761 0.148635 11.0064 0.520929 10.5229 1.08518C10.0395 1.64944 9.7743 2.36828 9.77545 3.11132C9.77828 3.28718 9.79612 3.46249 9.82878 3.63532L5.22212 5.72865C4.77968 5.31413 4.22579 5.03787 3.6285 4.93382C3.03121 4.82977 2.41654 4.90246 1.85999 5.14295C1.30344 5.38345 0.829268 5.78127 0.495715 6.28756C0.162163 6.79384 -0.0162385 7.38653 -0.0175706 7.99281C-0.0189027 8.5991 0.156892 9.19256 0.488217 9.70031C0.819542 10.2081 1.29197 10.608 1.84745 10.8509C2.40293 11.0938 3.01728 11.1692 3.61502 11.0678C4.21276 10.9664 4.76786 10.6926 5.21212 10.28L9.83078 12.3653C9.7987 12.538 9.78109 12.713 9.77812 12.8886C9.77799 13.5041 9.96037 14.1057 10.3022 14.6175C10.644 15.1292 11.1299 15.5281 11.6985 15.7637C12.267 15.9993 12.8927 16.0609 13.4963 15.9409C14.0999 15.8209 14.6543 15.5245 15.0895 15.0894C15.5247 14.6542 15.821 14.0997 15.941 13.4961C16.0611 12.8925 15.9994 12.2669 15.7638 11.6984C15.5282 11.1298 15.1294 10.6439 14.6176 10.3021C14.1058 9.96023 13.5042 9.77785 12.8888 9.77798ZM12.8888 1.33332C13.2405 1.33318 13.5843 1.43735 13.8768 1.63264C14.1692 1.82793 14.3972 2.10557 14.5319 2.43044C14.6666 2.75532 14.7019 3.11283 14.6334 3.45778C14.5648 3.80272 14.3956 4.11959 14.1469 4.36832C13.8983 4.61704 13.5815 4.78644 13.2366 4.8551C12.8917 4.92376 12.5341 4.88859 12.2092 4.75404C11.8843 4.61948 11.6065 4.39159 11.4111 4.09919C11.2157 3.80678 11.1115 3.463 11.1115 3.11132C11.1118 2.63998 11.2992 2.18805 11.6324 1.8547C11.9656 1.52136 12.4175 1.33384 12.8888 1.33332ZM3.11145 9.77798C2.75977 9.77811 2.41594 9.67395 2.12347 9.47866C1.83099 9.28337 1.60299 9.00573 1.46832 8.68085C1.33364 8.35598 1.29834 7.99846 1.36687 7.65352C1.4354 7.30858 1.60468 6.99171 1.85331 6.74298C2.10194 6.49426 2.41875 6.32485 2.76367 6.25619C3.10859 6.18754 3.46612 6.22271 3.79104 6.35726C4.11597 6.49181 4.39369 6.7197 4.58909 7.01211C4.78449 7.30451 4.88878 7.6483 4.88878 7.99998C4.88826 8.47126 4.70085 8.92309 4.36767 9.2564C4.03449 9.5897 3.58273 9.77728 3.11145 9.77798ZM12.8888 14.6666C12.5371 14.6666 12.1934 14.5624 11.901 14.367C11.6086 14.1716 11.3807 13.8939 11.2461 13.5691C11.1116 13.2442 11.0763 12.8867 11.1449 12.5418C11.2136 12.1969 11.3829 11.8801 11.6315 11.6314C11.8802 11.3828 12.197 11.2134 12.5419 11.1448C12.8868 11.0762 13.2443 11.1114 13.5692 11.246C13.8941 11.3806 14.1718 11.6085 14.3671 11.9008C14.5625 12.1932 14.6668 12.537 14.6668 12.8886C14.6664 13.3601 14.479 13.8121 14.1456 14.1455C13.8123 14.4789 13.3602 14.6663 12.8888 14.6666Z"
          fill="#F5F5F5"
        />
      </svg>
    );
  };
  const DownloadIcon = () => {
    return (
      <svg
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M14 8H12C11.2647 8 10.6667 8.598 10.6667 9.33333C10.6667 10.0687 10.0687 10.6667 9.33333 10.6667H6.66667C5.93133 10.6667 5.33333 10.0687 5.33333 9.33333C5.33333 8.598 4.73533 8 4 8H2C0.897333 8 0 8.89733 0 10V12.6667C0 14.5047 1.49533 16 3.33333 16H12.6667C14.5047 16 16 14.5047 16 12.6667V10C16 8.89733 15.1027 8 14 8ZM14.6667 12.6667C14.6667 13.7693 13.7693 14.6667 12.6667 14.6667H3.33333C2.23067 14.6667 1.33333 13.7693 1.33333 12.6667V10C1.33333 9.632 1.632 9.33333 2 9.33333L4 9.332V9.33333C4 10.804 5.196 12 6.66667 12H9.33333C10.804 12 12 10.804 12 9.33333H14C14.368 9.33333 14.6667 9.632 14.6667 10V12.6667ZM4.862 4.74733C4.60133 4.48667 4.60133 4.06533 4.862 3.80467C5.12267 3.544 5.544 3.544 5.80467 3.80467L7.33333 5.33333V0.666667C7.33333 0.298 7.63133 0 8 0C8.36867 0 8.66667 0.298 8.66667 0.666667V5.33333L10.1953 3.80467C10.456 3.544 10.8773 3.544 11.138 3.80467C11.3987 4.06533 11.3987 4.48667 11.138 4.74733L8.94267 6.94267C8.68467 7.20067 8.34533 7.33067 8.006 7.332L8 7.33333L7.994 7.332C7.65467 7.33067 7.31533 7.20067 7.05733 6.94267L4.862 4.74733Z"
          fill="#F5F5F5"
        />
      </svg>
    );
  };
  const DividerVerticalIcon = () => {
    return (
      <svg
        width="2"
        height="19"
        viewBox="0 0 2 19"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M0.921875 0.298706L0.921876 18.6883"
          stroke="white"
          stroke-opacity="0.21"
          stroke-width="0.306493"
        />
      </svg>
    );
  };
  const ZoomInIcon = () => {
    return (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M12,2 L12,22 M2,12 L22,12"
          stroke="white"
          stroke-width="2"
          strokeLinecap="round"
          fill="none"
        />
      </svg>
    );
  };
  const ZoomOutIcon = () => {
    return (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
      >
        <rect x="4" y="11" width="16" height="2" fill="white" />
      </svg>
    );
  };
  const DropDownIcon = () => {
    return (
      <svg
        width="12"
        height="8"
        viewBox="0 0 12 8"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1 2L6 6L11 2"
          stroke="white"
          stroke-width="1.5"
          strokeLinecap="round"
          stroke-linejoin="round"
        />
      </svg>
    );
  };
  const DropUpIcon = () => {
    return (
      <svg
        width="10"
        height="6"
        viewBox="0 0 10 6"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M0.526464 5.52666C0.58844 5.58915 0.662173 5.63874 0.743412 5.67259C0.824652 5.70644 0.911789 5.72386 0.999797 5.72386C1.0878 5.72386 1.17494 5.70644 1.25618 5.67259C1.33742 5.63874 1.41115 5.58915 1.47313 5.52666L4.52646 2.47333C4.58844 2.41084 4.66217 2.36125 4.74341 2.3274C4.82465 2.29356 4.91179 2.27613 4.9998 2.27613C5.08781 2.27613 5.17494 2.29356 5.25618 2.3274C5.33742 2.36125 5.41116 2.41084 5.47313 2.47333L8.52646 5.52666C8.58844 5.58915 8.66217 5.63874 8.74341 5.67259C8.82465 5.70644 8.91179 5.72386 8.9998 5.72386C9.08781 5.72386 9.17494 5.70644 9.25618 5.67259C9.33742 5.63874 9.41116 5.58915 9.47313 5.52666C9.5973 5.40175 9.66699 5.23279 9.66699 5.05666C9.66699 4.88054 9.5973 4.71157 9.47313 4.58666L6.41313 1.52666C6.03813 1.15213 5.5298 0.941755 4.9998 0.941755C4.4698 0.941755 3.96147 1.15213 3.58646 1.52666L0.526465 4.58666C0.402297 4.71157 0.332602 4.88054 0.332602 5.05666C0.332602 5.23279 0.402297 5.40175 0.526464 5.52666Z"
          fill="#FAFAFA"
          strokeWidth={1}
        />
      </svg>
    );
  };
  const SearchIcon = () => {
    return (
      <svg
        width="12"
        height="12"
        viewBox="0 0 12 12"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M11.8534 11.1465L8.86889 8.162C9.6822 7.1673 10.0821 5.89804 9.98581 4.61678C9.88955 3.33551 9.3045 2.14026 8.35168 1.27826C7.39887 0.416253 6.15119 -0.0465561 4.86671 -0.0144402C3.58224 0.0176757 2.35924 0.542259 1.4507 1.4508C0.542153 2.35935 0.0175689 3.58234 -0.014547 4.86682C-0.0466629 6.15129 0.416146 7.39898 1.27815 8.35179C2.14016 9.3046 3.33541 9.88965 4.61667 9.98592C5.89794 10.0822 7.16719 9.68231 8.16189 8.869L11.1464 11.8535C11.2407 11.9446 11.367 11.995 11.4981 11.9938C11.6292 11.9927 11.7546 11.9401 11.8473 11.8474C11.94 11.7547 11.9926 11.6293 11.9937 11.4982C11.9949 11.3671 11.9445 11.2408 11.8534 11.1465ZM4.99989 9C4.20877 9 3.43541 8.7654 2.77761 8.32588C2.11981 7.88635 1.60712 7.26164 1.30437 6.53073C1.00162 5.79983 0.922409 4.99556 1.07675 4.21964C1.23109 3.44371 1.61205 2.73098 2.17146 2.17157C2.73087 1.61216 3.44361 1.2312 4.21953 1.07686C4.99545 0.922516 5.79972 1.00173 6.53062 1.30448C7.26153 1.60723 7.88624 2.11992 8.32577 2.77772C8.7653 3.43551 8.99989 4.20887 8.99989 5C8.9987 6.0605 8.57689 7.07722 7.827 7.82711C7.07712 8.577 6.06039 8.99881 4.99989 9Z"
          fill="#4CB963"
        />
      </svg>
    );
  };
  const HistoryIcon = () => {
    return (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M12 2c-5.523 0-10 4.477-10 10s4.477 10 10 10 10-4.477 10-10c0-1.966-.573-3.799-1.563-5.341l-1.532 1.532c.719 1.057 1.095 2.295 1.095 3.809 0 3.866-3.134 7-7 7s-7-3.134-7-7 3.134-7 7-7c1.514 0 2.852.389 3.909 1.038l1.532-1.532c-1.542-.99-3.375-1.563-5.341-1.563z"
          fill="white"
          stroke="#1A2737"
          stroke-width="1.5"
        />
        <line
          x1="12"
          y1="12"
          x2="12"
          y2="5"
          stroke="white"
          stroke-width="1"
          strokeLinecap="round"
          transform="rotate(-60 12 12)"
        />
        <line
          x1="12"
          y1="12"
          x2="17"
          y2="12"
          stroke="white"
          stroke-width="1"
          strokeLinecap="round"
          transform="rotate(-60 12 12)"
        />
      </svg>
    );
  };
  const customMarker = new L.Icon({
    iconUrl:
      "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",
    iconRetinaUrl:
      "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png",
    shadowUrl:
      "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png",
    iconSize: [20, 20], // Set the size of the icon here
    iconAnchor: [10, 20],
    popupAnchor: [0, -20],
    shadowSize: [41, 41],
  });
  const [location, setLocation] = useState("");
  const [coords, setCoords] = useState(null);
  const mapRef = useRef();
  const searchLocation = async () => {
    const response = await fetch(
      `https://nominatim.openstreetmap.org/search?format=json&q=${location}&limit=1`
    );
    const data = await response.json();
    if (data[0]) {
      const lat = parseFloat(data[0].lat);
      const lon = parseFloat(data[0].lon);
      setCoords([lat, lon]);
    } else {
      alert("Location not found");
    }
  };

  const executeScript = () => {
    // handleGenerateButtonClick(); // Call handleGenerateButtonClick after the script execution
    setNameToPass(Water_Stress); 
    fetch('http://localhost:5000/execute-script', {
      method: 'POST',
    })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        setinitialtiff(false);
        fetchGeoTiff();
      })
      .catch(error => console.error('Error executing script:', error));
  };

  const onClickDemoButton = () => {
    window.location.reload();
    document
    .getElementsByClassName("leaflet-draw-draw-polyline")[0]
    .click()
  }


  return (
    <>
      <MapContainer
        ref={mapRef}
        center={center}
        zoom={zoom}
        scrollWheelZoom={true}
        zoomControl={false}
        whenCreated={(mapInstance) => {
          mapRef.current = mapInstance;
        }}
      >
        {/* <TileLayer
          attribution='&copy; <a href="https://www.esri.com/">Esri</a> contributors'
          url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
        /> */}
        <TileLayer
          attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        <ZoomControl position="topright" />
        
           { tiffUrl  && !intialtiff && < GeoTiffLayer url={tiffUrl } options={options} />}
        <ZoomControl position="topright" />
        <GeoJSON
          key={JSON.stringify(nameToPass)}
          data={nameToPass}
          onEachFeature={onEachFeature}
        />
        <FeatureGroup>
          <div style={{ position: "absolute", top: "100px", left: "100px" }}>
            <EditControl
              onCreated={onDrawCreate}
              draw={{
                circle: true,
                marker: true,
                polyline: true,
                rectangle: true,
                circlemarker: true,
                polygon: {
                  allowIntersection: false,
                  drawError: {
                    color: "FFFFFF",
                    timeout: 1000,
                  },
                  shapeOptions: {
                    color: "#bada55", // Stroke color
                    fillColor: "#f06eaa", // Fill color
                    fillOpacity: 0.5, // Fill opacity (0-1)
                    weight: 1, // Stroke width
                    dashArray: "5, 10", // Stroke dash pattern (if you want a dashed line)
                    lineJoin: "round", // Line join style ('miter', 'round', 'bevel')
                  },
                },
              }}
              edit={{
                remove: false,
                edit: false,
              }}
            />
          </div>
        </FeatureGroup>

        <div
          style={{
            backgroundColor: "#1A2737",
            zIndex: "999",
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            position: "absolute",
            left: "20px",
            borderRadius: "25px",
            padding: "10px",
            width: "300px",
            justifyContent: "flex-start",
            flexFlow: "column",
          }}
        >
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                backgroundColor: "#1A273",
                padding: "5px",
                color: "white",
                fontSize: "16px",
              }}
            >
              <span style={{ marginLeft: "8px" }}>Area of Interest</span>
            </div>
            <button
              style={{
                zIndex: 999,
                display: "flex",

                color: "white",
                margin: "10px",
                borderRadius: "25px",
                background: "#ffffff14",
                border: "none",
              }}
            >
              <span style={{ marginLeft: "8px", marginRight: "4px" }}>
                Free Trial
              </span>
            </button>
            <div
              style={{
                display: "flex",
                margin: "5px",
                justifyContent: "space-between",
                backgroundColor: "#ffffff14",
              }}
            >
              <DropUpIcon />
            </div>
          </div>
          <div
            style={{
              display: "flex",
              justifyContent: "flex-start",
              alignItems: "",
              margin: "5px",
              backgroundColor: "#1A2737",
            }}
          >
            <input
              type="text"
              value={location}
              onChange={(e) => setLocation(e.target.value)}
              style={{
                backgroundColor: "#1A2737",
                borderRadius: "20px",
                borderWidth: "0.5px",
                borderColor: "gray",
                width: "170px",
                color: "white",
              }}
              placeholder="Search Location"
            />
            <button onClick={searchLocation} style={{ borderRadius: "20px" }}>
              {" "}
              <SearchIcon />
            </button>
            <SetViewOnClick coords={coords} map={mapRef.current} />
          </div>
        </div>
        <div
          style={{
            backgroundColor: "#1A2737",
            width: "200px",
            zIndex: "999",
            display: "flex",
            flexFlow: "column",
            justifyContent: "flex-start",
            justifyItems: "flex-start",
            alignItems: "flex-start",
            position: "absolute",
            right: "40px",
            borderRadius: "25px",
            padding: "10px",
            top: "110px",
          }}
        >
          <div
            style={{
              display: "flex",
              flexFlow: "row",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                margin: "5px",
              }}
            >
              <HorizontalLineIcon />
              <HorizontalLineIcon />
              <HorizontalLineIcon />
            </div>
            <span style={{ marginLeft: "8px", color: "white" }}>Settings</span>
          </div>
          <div
            style={{
              display: "flex",
              flexFlow: "row",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                margin: "5px",
              }}
            >
              <HorizontalLineIcon />
              <HorizontalLineIcon />
              <HorizontalLineIcon />
            </div>
            <span style={{ marginLeft: "8px", color: "white" }}>
              Train Model
            </span>
          </div>
          <div
            style={{
              display: "flex",
              flexFlow: "row",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                margin: "5px",
              }}
            >
              <HorizontalLineIcon />
              <HorizontalLineIcon />
              <HorizontalLineIcon />
            </div>
            <span style={{ marginLeft: "8px", color: "white" }}>
              Visualized Data
            </span>
          </div>
          <div
            style={{
              display: "flex",
              flexFlow: "row",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                margin: "5px",
              }}
            >
              <HorizontalLineIcon />
              <HorizontalLineIcon />
              <HorizontalLineIcon />
            </div>
            <span style={{ marginLeft: "8px", color: "white" }}>
              Pricing Plans
            </span>
          </div>
          <DividerLineHorizontalIcon />
          <div
            style={{
              display: "flex",
              flexFlow: "row",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                margin: "5px",
              }}
            >
              <HorizontalLineIcon />
              <HorizontalLineIcon />
              <HorizontalLineIcon />
            </div>
            <span style={{ marginLeft: "8px", color: "white" }}>
              Privacy Policy
            </span>
          </div>
          <div
            style={{
              display: "flex",
              flexFlow: "row",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                margin: "5px",
              }}
            >
              <HorizontalLineIcon />
              <HorizontalLineIcon />
              <HorizontalLineIcon />
            </div>
            <span style={{ marginLeft: "8px", color: "white" }}>
              Terms and Conditions
            </span>
          </div>
          <DividerLineHorizontalIcon />
          <div
            style={{
              display: "flex",
              flexFlow: "row",
              alignItems: "center",
              margin: "5px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                margin: "5px",
              }}
            >
              <HorizontalLineIcon />
              <HorizontalLineIcon />
              <HorizontalLineIcon />
            </div>
            <span style={{ marginLeft: "8px", color: "white" }}>Sign Out</span>
          </div>
        </div>
        <div
          className="map-controls-container"
          style={{
            backgroundColor: "#1A2737",
            zIndex: "999",
            display: "flex",
            flexFlow: "column",
            position: "absolute",
            left: "20px",
            top: "210px",
            borderRadius: "25px",
            alignItems: "flex-start",
            padding: "10px",
            width: "300px",
          }}
        >
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
              justifyContent: "flex-start",
              fontSize: "16px",
            }}
          >
            <span style={{ marginLeft: "8px" }}>Draw boundary</span>
          </div>

          {/* draw tools div */}
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              margin: "2px",
            }}
          >
            <button
              className="custom-button"
              onClick={() =>
                document
                  .getElementsByClassName("leaflet-draw-draw-polyline")[0]
                  .click()
              }
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",
                background: "#1A2737",
                color: "white",
                border: "none",
              }}
            >
              {" "}
              <PolylineIcon />
            </button>
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",
                background: "#1A2737",

                color: "white",
                border: "none",
              }}
              onClick={() =>
                document
                  .getElementsByClassName("leaflet-draw-draw-polygon")[0]
                  .click()
              }
            >
              <PolygonIcon />
            </button>
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",
                background: "#1A2737",

                color: "white",
                border: "none",
              }}
              onClick={() =>
                document
                  .getElementsByClassName("leaflet-draw-draw-rectangle")[0]
                  .click()
              }
            >
              {" "}
              <RectangleIcon />{" "}
            </button>
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",
                background: "#1A2737",

                color: "white",
                border: "none",
              }}
              onClick={() =>
                document
                  .getElementsByClassName("leaflet-draw-draw-circle")[0]
                  .click()
              }
            >
              {" "}
              <CircleIcon />{" "}
            </button>
            <div className="area-text">{areaOfPolygon} Sq Ft</div>
          </div>
          {/* DividerLine Div */}
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            <DividerLineHorizontalIcon />
          </div>

          {/* Text div */}
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
              alignItems: "center",
              fontSize: "16px",
            }}
          >
            <div
              style={{
                display: "flex",
                flexDirection: "column",
              }}
            >
              <ParametersInsideBoxIcon />
              <ParametersVShapedIcon />
              <ParametersVShapedIcon />
            </div>

            <span style={{ marginLeft: "8px" }}>Parameters</span>
          </div>
          {/* Parameters div */}
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              flexWrap: "wrap",
            }}
          >
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",

                borderRadius: 32,
                background: "#ffffff14",
                border: "none",
                color: "white",
              }}
              onClick={() => setNameToPass(Sucrose)}
            >
              Sucrose
            </button>
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",
                background: "#ffffff14",
                border: "none",
                borderRadius: 32,

                color: "white",
              }}
              onClick={() => setNameToPass(Harvest_Date)}
            >
              Harvest Data
            </button>
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",
                background: "#ffffff14",
                border: "none",
                borderRadius: 32,

                color: "white",
              }}
              onClick={() => setNameToPass(Yield)}
            >
              Crop Yield
            </button>
            <button
              className="custom-button"
              // onClick={executeScript}
              style={{
                zIndex: 999,
                margin: "5px",
                display: "flex",
                background: "#ffffff14",
                border: "none",
                borderRadius: 32,

                color: "white",
              }}
              // onClick={() => setNameToPass(Water_Stress)}
            >
              Crop Water Stress
            </button>
          </div>

          {geojson && <GeoJSON data={geojson} />}
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            <DividerLineHorizontalIcon />
          </div>
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
              fontSize: "16px",
            }}
          >
            Select Date
          </div>
          <div style={{ display: "flex", justifyContent: "space-between" }}>
            {/* <span
              style={{
                marginLeft: "10px",
                fontSize: "13px",
                color: "white",
                marginRight: "5px",
              }}
            >
              From
            </span> */}
            <div
              style={{
                display: "flex",
                alignItems: "center",
                marginLeft: "10px",
              }}
            >
             <DatePicker
                  className="datePickerStartDate"
                  selected={startDate}
                  onChange={(date) => setStartDate(date)}
                  showMonthDropdown
                  showYearDropdown
                  dateFormat="dd-MM-yyyy"
                  includeDates={[
                    new Date("2019-01-08"),
                    new Date("2019-01-15"),
                    new Date("2019-01-24"),
                    new Date("2019-01-31"),
                    new Date("2019-02-09"),
                    new Date("2019-02-16"),
                    new Date("2019-02-25"),
                    new Date("2019-03-04"),
                    new Date("2019-03-13"),
                    new Date("2019-03-20"),
                    new Date("2019-03-29"),
                    new Date("2019-04-05"),
                    new Date("2019-04-14"),
                    new Date("2019-04-21"),
                    new Date("2019-04-30"),
                    new Date("2019-05-07"),
                    new Date("2019-05-16"),
                    new Date("2019-05-23"),
                    new Date("2019-06-01"),
                    new Date("2019-06-08"),
                    new Date("2019-06-17"),
                    new Date("2019-06-24"),
                    new Date("2019-07-03"),
                    new Date("2019-07-10"),
                    new Date("2019-07-19"),
                    new Date("2019-07-26"),
                    new Date("2019-08-04"),
                    new Date("2019-08-11"),
                    new Date("2019-08-20"),
                    new Date("2019-08-27"),
                    new Date("2019-09-05"),
                    new Date("2019-09-12"),
                    new Date("2019-09-21"),
                    new Date("2019-09-28"),
                    new Date("2019-10-07"),
                    new Date("2019-10-14"),
                    new Date("2019-10-23"),
                    new Date("2019-10-30"),
                    new Date("2019-11-08"),
                    new Date("2019-11-15"),
                    new Date("2019-11-24"),
                    new Date("2019-12-01"),
                    new Date("2019-12-10"),
                    new Date("2019-12-17"),
                    new Date("2019-12-26"),
                    new Date("2020-01-02"),
                    new Date("2020-01-11"),
                    new Date("2020-01-18"),
                    new Date("2020-01-27"),
                    new Date("2020-02-03"),
                    new Date("2020-02-12"),
                    new Date("2020-02-19"),
                    new Date("2020-02-28"),
                    new Date("2020-03-06"),
                    new Date("2020-03-15"),
                    new Date("2020-03-22"),
                    new Date("2020-03-31"),
                    new Date("2020-04-07"),
                    new Date("2020-04-16"),
                    new Date("2020-04-23"),
                    new Date("2020-05-02"),
                    new Date("2020-05-09"),
                    new Date("2020-05-18"),
                    new Date("2020-05-25"),
                    new Date("2020-06-03"),
                    new Date("2020-06-10"),
                    new Date("2020-06-19"),
                    new Date("2020-06-26"),
                    new Date("2020-07-05"),
                    new Date("2020-07-12"),
                    new Date("2020-07-21"),
                    new Date("2020-07-28"),
                    new Date("2020-08-06"),
                    new Date("2020-08-13"),
                    new Date("2020-08-22"),
                    new Date("2020-08-29"),
                    new Date("2020-09-07"),
                    new Date("2020-09-14"),
                    new Date("2020-09-23"),
                    new Date("2020-09-30"),
                    new Date("2020-10-09"),
                    new Date("2020-10-16"),
                    new Date("2020-10-25"),
                    new Date("2020-11-01"),
                    new Date("2020-11-10"),
                    new Date("2020-11-17"),
                    new Date("2020-11-26"),
                    new Date("2020-12-03"),
                    new Date("2020-12-12"),
                    new Date("2020-12-19"),
                    new Date("2020-12-28"),
                    new Date("2021-01-04"),
                    new Date("2021-01-13"),
                    new Date("2021-01-20"),
                    new Date("2021-01-29"),
                    new Date("2021-02-05"),
                    new Date("2021-02-14"),
                    new Date("2021-02-21"),
                    new Date("2021-03-02"),
                    new Date("2021-03-09"),
                    new Date("2021-03-18"),
                    new Date("2021-03-25"),
                    new Date("2021-04-03"),
                    new Date("2021-04-10"),
                    new Date("2021-04-19"),
                    new Date("2021-04-26"),
                    new Date("2021-05-05"),
                    new Date("2021-05-12"),
                    new Date("2021-05-21"),
                    new Date("2021-05-28"),
                    new Date("2021-06-06"),
                    new Date("2021-06-13"),
                    new Date("2021-06-22"),
                    new Date("2021-06-29"),
                    new Date("2021-07-08"),
                    new Date("2021-07-15"),
                    new Date("2021-07-24"),
                    new Date("2021-07-31"),
                    new Date("2021-08-09"),
                    new Date("2021-08-16"),
                    new Date("2021-08-25"),
                    new Date("2021-09-01"),
                    new Date("2021-09-10"),
                    new Date("2021-09-17"),
                    new Date("2021-09-26"),
                    new Date("2021-10-03"),
                    new Date("2021-10-12"),
                    new Date("2021-10-19"),
                    new Date("2021-10-28"),
                    new Date("2021-11-03"),
                    new Date("2021-11-04"),
                    new Date("2021-11-08"),
                    new Date("2021-11-13"),
                    new Date("2021-11-13"),
                    new Date("2021-11-20"),
                    new Date("2021-11-29"),
                    new Date("2021-12-06"),
                    new Date("2021-12-07"),
                    new Date("2021-12-14"),
                    new Date("2021-12-15"),
                    new Date("2021-12-22"),
                    new Date("2021-12-23"),
                    new Date("2021-12-30"),
                    new Date("2021-12-31"),
                    new Date("2022-01-07"),
                    new Date("2022-01-08"),
                    new Date("2022-01-15"),
                    new Date("2022-01-16"),
                    new Date("2022-01-23"),
                    new Date("2022-01-24"),
                    new Date("2022-12-17"),
                    new Date("2022-01-31"),
                    new Date("2022-02-01"),
                    new Date("2022-02-08"),
                    new Date("2022-02-09"),
                    new Date("2022-02-16"),
                    new Date("2022-02-17"),
                    new Date("2022-02-24"),
                    new Date("2022-02-25"),
                    new Date("2022-03-04"),
                    new Date("2022-03-05"),
                    new Date("2022-03-12"),
                    new Date("2022-03-20"),
                    new Date("2022-03-21"),
                    new Date("2022-03-28"),
                    new Date("2022-03-29"),
                    new Date("2022-04-05"),
                    new Date("2022-04-06"),
                    new Date("2022-04-13"),
                    new Date("2022-04-14"),
                    new Date("2022-04-22"),
                    new Date("2022-04-30"),
                    new Date("2022-05-08"),
                    new Date("2022-05-16"),
                    new Date("2022-05-24"),
                    new Date("2022-06-01"),
                    new Date("2022-06-09"),
                    new Date("2022-06-17"),
                    new Date("2022-06-25"),
                    new Date("2022-07-03"),
                    new Date("2022-07-11"),
                    new Date("2022-07-19"),
                    new Date("2022-07-27"),
                    new Date("2022-08-04"),
                    new Date("2022-08-12"),
                    new Date("2022-08-20"),
                    new Date("2022-08-28"),
                    new Date("2022-09-05"),
                    new Date("2022-09-13"),
                    new Date("2022-09-21"),
                    new Date("2022-09-29"),
                    new Date("2022-10-07"),
                    new Date("2022-10-15"),
                    new Date("2022-10-23"),
                    new Date("2022-10-31"),
                    new Date("2022-11-08"),
                    new Date("2022-11-16"),
                    new Date("2022-11-24"),
                    new Date("2022-12-02"),
                    new Date("2022-12-10"),
                    new Date("2022-12-18"),
                    new Date("2022-12-26"),
                    new Date("2023-01-03"),
                    new Date("2023-01-11"),
                    new Date("2023-01-19"),
                    new Date("2023-01-27"),
                    new Date("2022-02-04"),
                    new Date("2023-02-12"),
                    new Date("2023-02-20"),
                    new Date("2023-03-08"),
                    new Date("2023-03-16"),
                    new Date("2023-03-24"),
                    new Date("2023-04-01"),
                    new Date("2023-04-09"),
                    new Date("2023-04-17"),
                    new Date("2023-04-25"),
                  ]}/>
              <div style={{ marginLeft: "5px" }}>
                <DropDownIcon />
              </div>
            </div>
            {/* <span
              style={{
                marginLeft: "10px",
                fontSize: "13px",
                color: "white",
                marginRight: "5px",
              }}
            >
              To
            </span>
            <div style={{ display: "flex", alignItems: "center" }}>
              <DatePicker
                selected={endDate}
                onChange={(date) => setEndDate(date)}
                dateFormat="dd-MM-yyyy"
              />
              <div style={{ marginLeft: "5px" }}>
                <DropDownIcon />
              </div>
            </div> */}
          </div>
          <div style={{ opacity: "0", margin: "4px" }}>
            {" "}
            <HorizontalLineIcon />{" "}
          </div>
          <button
          onClick={executeScript}
            style={{
              backgroundColor: "#4CB963",
              borderRadius: "20px",
              color: "white",
              fontSize: "16px",
              width: "270px",
              margin: "14px",
              padding: "10px", 
              justifyContent: "flex-start",
            }}
          >
            Generate
          </button>
        </div>
        <div
          style={{
            zIndex: "999",
            display: "flex",
            flexFlow: "row",
            position: "absolute",
            left: "40%",
            width: "280px",
            bottom: "35px",

            alignItems: "center",
            justifyContent: "center",
            padding: "10px",
          }}
        >
          <button
            className="zoomcontrolbutton"
            onClick={() =>
              document
                .getElementsByClassName("leaflet-control-zoom-in")[0]
                .click()
            }
          >
            <ZoomInIcon />{" "}
          </button>
          <button
            className="zoomcontrolbutton"
            onClick={() =>
              document
                .getElementsByClassName("leaflet-control-zoom-out")[0]
                .click()
            }
          >
            {" "}
            <ZoomOutIcon />{" "}
          </button>
        </div>
        <div
          style={{
            backgroundColor: "#1A2737",
            zIndex: "999",
            display: "flex",
            flexFlow: "column",
            position: "absolute",
            left: "75%",
            width: "300px",
            top: "380px",
            borderRadius: "20px",
            padding: "10px",
          }}
        >
          <div
            style={{
              display: "flex",
              alignItems: "center",
              flexFlow: "row",
            }}
          >
            <div
              style={{
                display: "flex",
                backgroundColor: "#1A273",
                padding: "5px",
                color: "white",
              }}
            >
              Report
            </div>
            <button
              style={{
                zIndex: 999,
                display: "flex",
                background: "#ffffff14",
                color: "white",
                margin: "10px",
                borderRadius: "25px",
                border: "none",
                alignItems: "center",
                position: "absolute",
                right: "10px",
              }}
            >
              <HistoryIcon />
              <span style={{ marginLeft: "8px" }}>History</span>
            </button>
          </div>

          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            Lorem Ipsum has been the industry's standard dummy text ever since
            the 1500s, when an unknown printer took a galley of type and
            scrambled it to
          </div>
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            <ReportRainIcon />
            Rain
          </div>
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            Lorem Ipsum has been the industry's standard dummy text ever since
            the 1500s.
          </div>
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            <ReportRainIcon />
            Rain
          </div>
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            Lorem Ipsum has been the industry's standard dummy text ever since
            the 1500s.
          </div>
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          ></div>

          {/* <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            No reports generated yet
          </div> */}
          <DividerLineHorizontalIcon />
          <div
            style={{
              display: "flex",
              backgroundColor: "#1A273",
              padding: "5px",
              color: "white",
            }}
          >
            {" "}
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                display: "flex",
                background: "#ffffff14",
                border: "none",
                color: "white",
                margin: "10px",
                borderRadius: "25px",
              }}
            >
              <ShareIcon />

              <span style={{ marginLeft: "8px" }}>Share</span>
            </button>{" "}
            <button
              className="custom-button"
              style={{
                zIndex: 999,
                display: "flex",
                background: "#ffffff14",
                border: "none",
                color: "white",
                margin: "10px",
                borderRadius: "25px",
              }}
            >
              <DownloadIcon />

              <span style={{ marginLeft: "8px" }}>Download Report</span>
            </button>
          </div>
        </div>
      </MapContainer>

      <Legend />
      <button
        style={{
          position: "absolute",
          width: 56,
          height: 56,
          left: 20,
          top: 20,
          zIndex: 999,
          backgroundColor: "#4CB963",
          color: "white",
          borderRadius: "50%",
          whiteSpace: "nowrap",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          padding: "0 12px 0 12px", // modified padding value
          fontSize: "14px",
          margin: "10px",
        }}
      >
        JD
      </button>
      <button
        style={{
          position: "absolute",
          width: 150,
          height: 56,
          left: 100,
          top: 20,
          zIndex: 999,
          backgroundColor: "#1A2737",
          color: "white",
          borderRadius: "30px",
          whiteSpace: "nowrap",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          padding: "0 12px 0 12px", // modified padding value
          fontSize: "14px",
          margin: "10px",
        }}
      >
        <NewProjIcon width="18" height="20" />

        <span style={{ marginLeft: "8px" }}>New project</span>
      </button>

      <button
        onClick={onClickDemoButton}
        style={{
          position: "absolute",
          width: 90,
          height: 56,
          left: 255,
          top: 20,
          zIndex: 999,
          backgroundColor: "#1A2737",
          color: "white",
          borderRadius: "30px",
          whiteSpace: "nowrap",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          padding: "0 12px 0 12px", // modified padding value
          fontSize: "14px",
          margin: "10px",
        }}
      >
        <DemoIcon width="18" height="20" />

        <span style={{ marginLeft: "8px" }}>Demo</span>
      </button>
      <button
        style={{
          position: "absolute",
          width: 64,
          height: 56,
          right: 260,
          top: 20,
          zIndex: 999,
          backgroundColor: "#1A2737",
          color: "white",
          borderRadius: "50%",
          margin: "10px",
        }}
      >
        <BlocksIcon />
      </button>
      <button
        style={{
          position: "absolute",
          width: 64,
          height: 56,
          right: 190,
          top: 20,
          zIndex: 999,
          backgroundColor: "#1A2737",
          color: "white",
          borderRadius: "50%",
          margin: "10px",
        }}
      >
        <BooksIcon />
      </button>
      <button
        // onClick={toggleMenu}
        style={{
          position: "absolute",
          width: 130,
          height: 56,
          right: 30,
          top: 20,
          zIndex: 999,
          backgroundColor: "#1A2737",
          color: "white",
          borderRadius: "20px",
          whiteSpace: "nowrap",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          padding: "0 12px 0 12px", // modified padding value
          fontSize: "14px",
          margin: "10px",
        }}
      >
        <AgriAIIcon width="27.27" height="16" />

        <span style={{ marginLeft: "8px" }}>Agri AI</span>
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            margin: "5px",
          }}
        >
          <HorizontalLineIcon />
          <HorizontalLineIcon />
          <HorizontalLineIcon />
        </div>
      </button>

      {/* {isOpen && (
      <div>
        <a href="#">Option 1</a>
        <a href="#">Option 2</a>
        <a href="#">Option 3</a>
      </div>
    )} */}
    </>
  );
};

export default MainPage;